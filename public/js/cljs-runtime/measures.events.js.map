{"version":3,"sources":["measures/events.cljs"],"mappings":";AAKA,AAAA,AAAMA,AACHC,AAAOC,AAAIC;AADd,AAAA;;AAIA,AAAA,AAAMC,AAAkBD;AAAxB,AAEE,AAAAE,AAGC,AAAA,AAACC,AAAMC,AAASC,AAAgBL;AAHjC,AAAA,AAAAE,AAAAA,AAAAA;;AAQF;;;AAAA,AAAMI,AAEHP,AAAIQ;AAFP,AAGE,AAACJ,AAAMC,AAASC,AAAMN,AAAIQ;;AAG5B;;;;;;;;AAAA,AAAMC,AAOHT;AAPH,AAQE,AAAA,AAACI,AAAMC,AAASC,AAAwBN;;AACxC,AAAA,AAACU,AAAcC;;AAGjB,AAAA,AAAMC;AAAN,AACE,AAAA,AAAmB,AAAAC,AAAA,AAAAC,AAAET;AAAF,AAAA,AAAAQ,AAAAA,AAAAA;;;AAErB;;;;;;;;AAAA,AAAME,AAOHf;AAPH,AAQE,AAAA,AAACI,AAAMC,AAASC,AAAqBN;;AACrC,AAAA,AAACU,AAAcC;;AAEjB,AAAA,AAAMK;AAAN,AACE,AAAA,AAAgB,AAAAC,AAAA,AAAAH,AAAET;AAAF,AAAA,AAAAY,AAAAA,AAAAA;;;AAGlB,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAACd,AAAMC,AAASC;;AAGlB,AAAA,AAAMa;AAAN,AACE,AAAA,AAAA,AAACf,AAAMC,AAASC;;AAGlB","names":["measures.events/check","errors","key","new-val","measures.events/baseline-changed","fexpr__45944","cljs.core.swap_BANG_","measures.db/state","cljs.core/assoc","measures.events/set-db-key","val","measures.events/select-measure","js/setTimeout","measures.base/render-math","measures.events/selected-measure","fexpr__45945","cljs.core/deref","measures.events/select-tool","measures.events/selected-tool","fexpr__45946","measures.events/go-home","measures.events/go-flash-page"],"sourcesContent":["(ns measures.events\n  (:require [measures.db :as db]\n            [measures.base :as base]\n            [measures.info :as info]))\n\n(defn check\n  [errors key new-val]\n  )\n\n(defn baseline-changed [new-val]\n  ;; validate new-val\n  (; recalculate values if possible using this baseline\n\n\n   (swap! db/state assoc :baseline new-val))\n\n  ;; Only change the db if ALL recalculated values are good\n  )\n\n(defn set-db-key\n  \"Set a value in the database at the given keyword\"\n  [key val]\n  (swap! db/state assoc key val)\n   )\n\n(defn select-measure\n  \"Change the selected measure and kick of a maths re-render.\n   The re-ender must occur after the HTML has rerendered, so we delay it.\n   \n   Note: I expected triggering base/render-math from a :component-did-mount/update lifecycle\n   method to work here, but it doesn't. Hence the setTimeout kludge.\n   \"\n  [key]\n  (swap! db/state assoc :selected-measure key)\n  (js/setTimeout base/render-math 100)\n  )\n\n(defn selected-measure []\n  (:selected-measure (@db/state)))\n\n(defn select-tool\n  \"Change the selected tool and kick of a maths re-render.\n   The re-ender must occur after the HTML has rerendered, so we delay it.\n   \n   Note: I expected triggering base/render-math from a :component-did-mount/update lifecycle\n   method to work here, but it doesn't. Hence the setTimeout kludge.\n   \"\n  [key]\n  (swap! db/state assoc :selected-tool key)\n  (js/setTimeout base/render-math 100))\n\n(defn selected-tool []\n  (:selected-tool (@db/state)))\n\n\n(defn go-home []\n  (swap! db/state assoc :page? :home)\n  )\n\n(defn go-flash-page []\n  (swap! db/state assoc :page? :flash))\n\n\n(comment\n  (select-measure :RR)\n  (select-measure :PC)\n  (select-measure nil)\n  (selected-measure)\n  (select-tool :maths)\n  (select-tool :calc-final)\n  (select-tool :calc-measure)\n  (go-home)\n  (go-flash-page)\n\n  )"]}