{"version":3,"sources":["measures/info.cljs"],"mappings":";AAIA;;;AAAA,AAAKA;AASL;;;AAAA,AAAMC,AAEHC,AAAEC;AAFL,AAGE,AAAGA,AAAED;;AAEP;;;AAAA,AAAME,AAEHF,AAAEG;AAFL,AAGE,AAAAC,AAAK,AAAGJ,AAAEG;AAAVE,AAAc,AAAA,AAAKP;AAAnB,AAAA,AAAAM,AAAAC,AAAAD,AAAAC;;AAEF,AAUA;;;AAAA,AAAMC,AAEHN,AAAEC;AAFL,AAGE,AAAA,AAAO,AAAA,AAAG,AAAGA,AAAED;;AACjB,AAAA,AAAMO,AACHP,AAAEQ;AADL,AAEE,AAAAJ,AAAK,AAAGJ,AAAE,AAAGA,AAAE,AAAA,AAAGQ;AAAlBH,AAA4B,AAAA,AAAKP;AAAjC,AAAA,AAAAM,AAAAC,AAAAD,AAAAC;;AAEF,AAaA,AAAA,AAAMI,AACHT,AAAEC;AADL,AAEE,AAAG,AAAGA,AAAE,AAAA,AAAKA,AAAI,AAAGD,AAAE,AAAA,AAAKA;;AAE7B,AAAA,AAAMU,AACHV,AAAEW;AADL,AAGE,AAAAP,AAAK,AAAA,AAAK,AAAA,AAAK,AAAA,AAAK,AAAA,AAAGO,AAAGX,AAAE,AAAA,AAAK,AAAA,AAAKA;AAAtCK,AAA8C,AAAA,AAAKP;AAAnD,AAAA,AAAAM,AAAAC,AAAAD,AAAAC;;AAQF,AAQA,AAAA,AAAMO,AACHZ,AAAEC;AADL,AAGE,AAAG,AAACY,AAAY,AAAA,AAAKZ,AAAI,AAACY,AAAY,AAAA,AAAKb;;AAE7C,AAAA,AAAMc,AACHd,AAAEe;AADL,AAEE,AAAAX,AAAK,AAAA,AAAK,AAACY,AAAY,AAAA,AAAKhB,AAAGe;AAA/BV,AAAoC,AAAA,AAAKP;AAAznB,AACEG,AAEHiB,AAEAA,AAIKC,AACAF,AAEJZ,AACEC,AAEJY,AAECA,AAMJD,AAEKT,AACEC,AAEHS,AAEAA,AAKJD,AAEKN,AACEE,AAEHK,AACAA,AACAA,AACAA,AACAA,AACAA;AAEb,AAAA,AAAME,AAAYC;AAAlB,AACE,AAACC,AAAM,AAAAC,AAAC,AAAA,AAACC,AAAcR;AAAhB,AAAA,AAAAO,AAAAA,AAAAA,AAA0BF,AAAAA;;;AAGnC,AAAA,AAAMI;AAAN,AAEE,AAAMC,AAAiB,AAAA,AAAA,AAAAC,AAAoBC;AAA3C,AACE,AAACR,AAAWM;;AAEhB,AAKA,AAAA,AAAMG;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAQA,AAAA,AAAMC,AAAST;AAAf,AACE,AAACC,AAAM,AAAAS,AAAC,AAAA,AAACP,AAAc,AAACK;AAAjB,AAAA,AAAAE,AAAAA,AAAAA,AAAyBV,AAAAA;;;AAElC,AAAA,AAAMW;AAAN,AAEE,AAAMC,AAAc,AAAA,AAAA,AAAAN,AAAiBC;AAArC,AACE,AAACE,AAAQG;;AAEb","names":["measures.info/delta","measures.info/r-p->RR","r","p","measures.info/r-RR->p","RR","x__4217__auto__","y__4218__auto__","measures.info/r-p->PC","measures.info/r-PC->p","PC","measures.info/r-p->OR","measures.info/r-OR->p","OR","measures.info/r-p->HR","js/Math.log","measures.info/r-HR->p","HR","js/Math.pow","measures.info/measures","js/Number.POSITIVE_INFINITY","measures.base/para","js/Number.NEGATIVE_INFINITY","measures.info/measure-by","key","cljs.core/first","fexpr__48503","cljs.core/group-by","measures.info/current-measure","selected-measure","cljs.core/deref","measures.db/state","measures.info/tools","measures.info/tool-by","fexpr__48504","measures.info/current-tool","selected-tool"],"sourcesContent":["(ns measures.info\n  (:require [measures.db :as db]\n            [measures.base :refer [page section1 para]]))\n\n(def delta \n  \"Our precision for any baseline or absolute risk\"\n  0.001)\n\n;;\n;; In the following calculations, r is the baseline risk and p is the final risk\n;;\n\n;--- RR\n(defn r-p->RR\n  \"Find Relative Risk from baseline and final\"\n  [r p]\n  (/ p r)\n)\n(defn r-RR->p\n  \"Find final from baseline and RR\"\n  [r RR]\n  (min (* r RR) (- 1 delta)))\n\n(comment\n  (r-p->RR 0.1 0.12)\n  ;; => 1.2\n\n  (r-RR->p 0.1 1.2)\n  ;; => 0.12\n\n\n  )\n;--- PC\n(defn r-p->PC\n  \"Find PCk from baseline and final\"\n  [r p]\n  (* 100 (- (/ p r) 1)))\n(defn r-PC->p\n  [r PC]\n  (min (+ r (* r (/ PC 100))) (- 1 delta)))\n\n(comment\n  (r-p->PC 0.1 0.12)\n  ;; => 19.999999999999996\n\n  (r-PC->p 0.1 20)\n  ;; => 0.12000000000000001\n\n  (r-p->PC 0.1 0.12)\n  ;; => 19.999999999999996\n\n  )\n\n;---OR\n(defn r-p->OR\n  [r p]\n  (/ (/ p (- 1 p)) (/ r (- 1 r))))\n\n(defn r-OR->p\n  [r OR]\n  #_(/ 1 (* OR r (/ 1 (- 1 r))))\n  (min (- 1 (/ 1 (+ 1 (* OR r (/ 1 (- 1 r)))))) (- 1 delta))\n  #_(let [mu (* OR (/ r (- 1 r)))]\n    (/ mu (inc mu))))\n\n#_(defn r-OR->p\n  [r OR]\n  (/ (* r OR) (+ (* r (- r)) OR)))\n\n(comment \n  (r-p->OR 0.1 0.12)\n  ;; => 1.227272727272727\n\n  (r-OR->p 0.1 1.227272727272727)\n  ;; => 0.12000000000000001\n)\n;---\n(defn r-p->HR\n  [r p]\n\n  (/ (js/Math.log (- 1 p)) (js/Math.log (- 1 r))))\n\n(defn r-HR->p\n  [r HR]\n  (min (- 1 (js/Math.pow (- 1 r) HR)) (- 1 delta)))\n\n(comment\n  (r-p->HR 0.1 0.12)\n  ;; => 1.2132948544504327\n\n  (r-HR->p 0.1 1.2132948544504327)\n  ;; => 0.12\n  )\n;---\n\n(def measures\n  [{:key :RR\n    :name \"RR\"\n    :title \"Relative Risk\"\n    :min 0\n    :max js/Number.POSITIVE_INFINITY\n    :step 0.01\n\n    :evaluate r-p->RR\n    :calc-final r-RR->p\n    :maths [:<>\n            [para\n             \"By definition, $$RR = \\\\frac{p}{r}$$.\"]\n            [para \"So the final risk is $$p = r \\\\times RR$$.\"]]}\n   {:key :PC\n    :name \"PC\"\n    :title \"Percentage Change\"\n    :min     :min js/Number.NEGATIVE_INFINITY\n    :max     :max js/Number.POSITIVE_INFINITY\n    :step 1\n    :evaluate r-p->PC\n    :calc-final r-PC->p\n    :maths [:<>\n           [para \"By definition: $PC$ is the change in risk\n                   expressed as a percentage $$\\\\frac{p - r}{r} \\\\times 100 \\\\ \\\\%$$\"] \n            [para \"So the final risk is $$r + r \\\\times PC/100$$.\"]\n            ]}\n   {:key :OR\n    :name \"OR\"\n    :title \"Odds Ratio\"\n    :min 0\n    :max js/Number.POSITIVE_INFINITY\n    :step 0.01\n    :evaluate r-p->OR\n    :calc-final r-OR->p\n    :maths [:<>\n            [para\n             \"By definition, $$OR = \\\\frac{p}{(1-p)} / \\\\frac{r}{(1-r)}$$.\"]\n            [para \"Solving gives $$p = 1 - \\\\frac{1}{1+ OR \\\\frac{r}{(1-r)}}$$.\"]]}\n   {:key :HR\n    :name \"HR\"\n    :title \"Hazard Ratio\"\n    :min 0\n    :max js/Number.POSITIVE_INFINITY\n    :step 0.01\n    :evaluate r-p->HR\n    :calc-final r-HR->p\n    :maths [:<>\n            [para \"By definition, $HR = h_1(t)/h_0(t)$, where $h_1(t), h_0(t)$ are the hazards in the 'active' and baseline groups respectively. \"]\n            [para \"Therefore $HR = H_1(t)/H_0(t)$, where $H_1(t), H_0(t)$ are the cumulative hazards. \"]\n            [para \"Now $H_1(t) = -\\\\log S_1(t), H_0(t) = -\\\\log S_0(t)$, where $S_1(t), S_0(t)$ are the survival probabilities.   \"]\n            [para \"And so $HR = \\\\log S_1(t)/ \\\\log S_0(t).$\"]\n            [para \"For a specified follow-up time $t$, we have risks $p = 1- S_1(t)$, $r = 1- S_0(t)$, and so $$HR = \\\\frac{\\\\log (1-p)}{\\\\log (1-r)}$$.\"]\n            [para \"Rearranging gives  $$p = 1 - (1-r)^{HR}$$.\"]]}])\n\n(defn measure-by [key]\n  (first ((group-by :key measures) key)))\n\n\n(defn current-measure\n  []\n  (let [selected-measure (:selected-measure @db/state)]\n    (measure-by selected-measure)))\n\n(comment\n  (current-measure))\n\n;;;;\n\n(defn tools\n  []\n  [{:key :maths\n    :title \"Show the maths\"}\n   {:key :calc-final\n    :title \"Final risk calculator\"}]\n  )\n\n(defn tool-by [key]\n  (first ((group-by :key (tools)) key)))\n\n(defn current-tool\n  []\n  (let [selected-tool (:selected-tool @db/state)]\n    (tool-by selected-tool)))\n\n(comment\n  (def key :RR)\n  measures\n  (group-by :key measures)\n  (measure-by :RR)\n  (measure-by :PC)\n\n  (current-tool)\n  )"]}