{"version":3,"sources":["measures/views.cljs"],"mappings":"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","names":["measures.views/is-number?","x","cljs.core/not","js/isNaN","measures.views/measures-menu","selected-measure","cljs.core/deref","measures.db/state","selected?","m","cljs.core._EQ_","cljs.core.into","cljs.core.map","measures.events/select-measure","measures.info/measures","measures.views/maths-detail","measures.info/current-measure","measures.base/section2","measures.views/max-relative-risk","baseline","final","and__4115__auto__","js/Number.POSITIVE_INFINITY","measures.views/safe","v","fix","clojure.string/ends-with?","js/Number","js/Error","measures.views/maybe-value","ref","field","new-value","measure","fexpr__49483","measures.db/numeric-fields","cljs.core/identity","r","p","G__49485","G__49486","fexpr__49484","G__49488","fexpr__49487","cljs.core.swap_BANG_","cljs.core/assoc","js/console.log","measures.info/r-p->RR","measures.info/r-p->PC","measures.info/r-p->OR","measures.info/r-p->HR","fexpr__49489","measures.views/log-error","error","cljs.core/update","cljs.core/conj","measures.views/new-baseline","new-val","measures.views/new-rr","measures.views/new-final","measures.views/get-field-change-handler","e","vec__49490","cljs.core.nth","err-field","good-value","cljs.core.println","measures.views/step-from-field","fexpr__49493","measures.info/measure-by","measures.views/dps-from-step","step","js/Math.log10","measures.views/get-field-value","fexpr__49494","fexpr__49495","var_args","G__49497","measures.views/enter","options","label","medley.core.deep_merge","cljs.core/name","measures.views.enter","measures.views/tool-button","measures.base/button-primary","measures.views/tool-menu","selected-tool","measures.events/select-tool","measures.info/tools","measures.views/status","G__49499","G__49500","fexpr__49498","measure-title","clojure.string/lower-case","measures.views/error-report","temp__5735__auto__","errors","cljs.core/seq","err","cljs.core.pr_str","measures.views/inputs-panel","delta","measures.info/delta","measures.views/master-detail","measures.views/intro","measures.base/link","measures.base/para","measures.views/flash","measures.base/button-secondary-link","measures.base/spacer","measures.events/go-home","measures.views/home","js/setTimeout","measures.base/render-math","measures.events/go-flash-page","measures.views/main","measures.base/page","measures.db/flash?"],"sourcesContent":["(ns measures.views\n  (:require\n   ;[reagent.core :as r]\n   [measures.base :as base :refer [page button-primary button-secondary-link link section1 section2 para spacer]]\n   [measures.events :as events]\n   [measures.db :as db]\n   [measures.info :as info]\n   [medley.core :as medley]\n   [clojure.string :as string]))\n\n(defn is-number?\n  \"Return true if x is a number\"\n  [x]\n  (and (number? x) (not (js/isNaN x))))\n\n(defn measures-menu\n  []\n  (let [selected-measure (:selected-measure @db/state)\n        selected? (fn [m] (= (:key m) selected-measure))]\n    [:div {:class \"border border-gray-600 m-4 p-2 rounded-md w-72 bg-white shadow-lg\"}\n     [:span [:b \"Choose a measure\"]]\n     (into [:ul.mx-2.w-100%\n            #_{:class \"sm:w-1/8\"}]\n           (map (fn [m] [:li {:class (str \"px-2 py-2  w-full\"\n                                          \" cursor-pointer \"\n                                          (if (selected? m)\n                                            \"text-white bg-blue-500 hover:bg-indigo-500\"\n                                            \"text-lg text-gray-400 hover:bg-indigo-500\"))\n                              :on-click #(events/select-measure (:key m))}\n                         (:title m)])\n                info/measures))]))\n\n\n(defn maths-detail\n  []\n  (fn []\n    (let [m (info/current-measure)]\n      [:<>\n       [section2 (str \"The Mathematics of \" (:title m) \" $(\" (:name m) \")$\")]\n       [:<>\n        [:section {:class \"m-4\"}\n         \"Let the baseline risk be $r$. \n          The risk in the 'exposed' group, $p$, depends on the measure of change\"]\n        [:ul {:class \"maxw-[800px]\"}\n         [:li.ml-4.mt-0 \n          (:maths m)]]]])))\n\n(defn max-relative-risk\n  \"maximum relative risk\"\n  [baseline final]\n  (if (and baseline (pos? final))\n    (/ baseline final)\n    (js/Number.POSITIVE_INFINITY)))\n\n(comment\n\n  (def measure (info/current-measure)\n               ;; => {:min 0, :evaluate #object[measures$info$r_p__GT_RR], :key :RR, :maths [:<> [#object[measures$base$para] \"By definition, $$RR = \\\\frac{p}{r}$$.\"] [#object[measures$base$para] \"So the final risk is $$p = r \\\\times RR$$.\"]], :name \"RR\", :title \"Relative Risk\", :max ##Inf, :step 0.01, :calc-final #object[measures$info$r_RR__GT_p]}\n    )\n  (def new-value 0.11)\n  (def ref db/state)\n  (def field :baseline)\n  (info/r-RR->p 0.11 1)\n  (-> @ref measure))\n\n\n(defn safe\n  \"Works except for 0.X0X\"\n  [v fix]\n  (if (and (string? v) (or (string/ends-with? v \"0\")\n                           (string/ends-with? v \".\")))\n    v\n    (let [x (js/Number (.toFixed (js/Number v) fix))]\n      (assert (is-number? x))\n      x)))\n\n(defn maybe-value\n  \"return a value or an eror if value is invalid.\n   Type=\\\"number\\\" inputs eliminate most - maybe all - typed entry errors, but some can arise\n   from applying the formulae.\"\n  [ref field new-value]\n  (let [measure (info/current-measure)\n        new-value ((if (db/numeric-fields field)\n                     js/Number\n                     identity) new-value)]\n\n    (cond\n      (= field :baseline)\n      ;; The baseline has been edited\n      ;; We'll preserve the RR and update final\n\n      (let [;; new baseline\n            r new-value\n\n            ;; recalculate final\n            p ((:calc-final measure)\n               new-value\n               (@ref (:key measure)))]\n\n        (swap! ref assoc :final (safe p 3))\n\n        ;; r-XX->p\n        (js/console.log (str \"r-\" (:name measure) \"->p \")\n                        r p))\n\n      (= field :final)\n      (let [;; The final field has been edited\n            ;; We'll fix the baseline and recalculate the RR and all derived measures\n            r (:baseline @ref)\n            p new-value]\n\n        ;; update all derived measures atomically\n        (swap! ref assoc\n               :baseline (safe r 3)\n               :RR (safe (info/r-p->RR r p) 2)\n               :PC (safe (info/r-p->PC r p) 1)\n               :OR (safe (info/r-p->OR r p) 2)\n               :HR (safe (info/r-p->HR r p) 2))\n\n          ;; r-p->XX\n        (js/console.log (str \"(r-p\" \"->\" (:name measure))\n                        r p))\n\n      :else\n      (let\n        ;; The measure field has changed\n        ;; Keep baseline fixed recalculate final and other measures\n       [r (js/Number (:baseline @ref))\n        p ((:calc-final measure)\n           r\n           new-value)]\n\n        (js/console.log \"r-\" (:name measure) \"->p \"\n                        r\n                        p)\n\n        (swap! ref assoc :final (safe p 3))\n\n                ;; update all derived measures atomically\n        (swap! ref assoc\n               :RR (safe (info/r-p->RR r p) 2)\n               :PC (safe (info/r-p->PC r p) 1)\n               :OR (safe (info/r-p->OR r p) 2)\n               :HR (safe (info/r-p->HR r p) 2)))))\n\n    [nil new-value])\n\n\n#_(defn input-error\n      \"return an error if new-value cannot be assigned to the ref field,\n       or return a valid replacement\"\n      [ref field new-value]\n      (let [[error? value] (maybe-value ref field new-value)]\n        (if error?)))\n\n(defn log-error \n  [ref field error]\n  (swap! ref update :errors conj {:field field :error error}))\n\n(defn new-baseline\n  [ref new-val]\n  {:pre [(pos? new-val)]}\n  new-val)\n\n(comment\n  (new-baseline (atom {}) -1)\n  )\n\n(defn new-rr\n  [ref new-val]\n  )\n\n(defn new-final\n  [ref new-val])\n\n#_(defn new-rr\n  \"The final or baseline was changed by user, so recalculate the rest\"\n  [ref field new-val]\n\n  (let [rr (let [[numerator denominator]\n                 (if (= field :baseline)\n                   [(:final @ref) new-val]\n                   [new-val (:baseline @ref)])]\n             (if (pos? denominator)\n               (/ numerator denominator)))]))\n\n\n#_(defn recalculate-on-value-change\n  \"The value in field has changed - we need to recalculate the rest.\n   We ignore obvious errors here - they will be indicated in the display\"\n  [ref field]\n  (condp = field)\n  :baseline \n  :RR\n  :PC\n  :OR\n  :HR\n  :final)\n\n(defn get-field-change-handler \n  \"Eeturn a change-handler for a field inside ref. The handler inserts the new value into\n   the ref field, or it appends :errors in ref, leaving the field unchanged.\"\n  [ref field]\n\n  (fn [e]\n    ;(js/console.log field)\n    (-> e .-nativeEvent .preventDefault)\n    (let [new-value (-> e .-target .-value)\n          [err-field good-value :as error] (maybe-value ref field new-value)]\n      ;(js/console.log \"err-field \" (pr-str err-field))\n      (println [err-field good-value])\n      (if err-field\n        (log-error ref field error)\n        (swap! ref assoc field good-value)))))\n\n(comment\n  (def ref db/state)\n  (def field :RR)\n  (safe (js/Number 0.10) 3)\n  (def measure (info/current-measure))\n  (-> @db/state :RR)\n  )\n\n(defn step-from-field\n  [field]\n  ((info/measure-by field) :step)\n  )\n\n(step-from-field :HR)\n\n(defn dps-from-step\n  [step]\n  (- (js/Math.log10 step)))\n\n(defn get-field-value\n  \"Evaluate a field to configured precision\"\n  [ref field]\n  (safe (@ref field) (if (#{:baseline :final} field)\n                       3\n                       (-> field step-from-field dps-from-step)\n                       #_(dps-from-step (step-from-field field))))\n    #_(-> @ref\n        field\n        (js/Number.\n         (.toFixed (if (#{:baseline :final} field)\n                     3\n                     (dps-from-step\n                      (-> @ref field :step)))))))\n\n(comment\n  (-> @db/state :baseline :step)\n  )\n\n(defn enter\n  \"enter a labelled field value to ref in a form\"\n  ([options ref field label]\n   (let [options (medley/deep-merge {:id (name field)\n                                     :class \"ml-4 text-lg rounded-lg\"\n\n                                     :style {:width \"120px\"}\n                                     :type \"number\"\n                                     :min \"0\"\n                                     :max \"1\"\n                                     :step \"0.01\"\n                                     ;; TODO: deref db/state in caller\n                                     :value (get-field-value ref field)\n                                     :on-change (get-field-change-handler ref field)}\n                                    options)]\n     #_[:b (pr-str \"options-ref [options ref]\")]\n     [:section.flex.flex-col.mb-1\n      [:b [:label {:for (name field)} label \":\"]]\n      [:input options]\n      (when (:percent? [:span.text-2xl \" %\"])\n        [:span.text-2xl \" %\"])]))\n  \n  ([ref field label]\n   (enter nil ref field label)))\n\n(defn tool-button\n  [label]\n  [base/button-primary {:class \"w-full p-2\"} label])\n\n(defn tool-menu\n  []\n  (let [selected-tool (:selected-tool @db/state)\n        selected? (fn [m] (= (:key m) selected-tool))]\n    [:div {:class \"shadow-lg border border-gray-600  m-4 p-4 rounded-md w-60\"\n           :style {:background-color \"#fff\"}}\n     [:span \"Choose a tool\"]\n     (into [:ul.mx-2.w-100%\n            {:class \"sm:w-1/8\"}]\n           (map (fn [m] [:li {:class (str \"px-2 py-2  w-full\"\n                                          \" cursor-pointer \"\n                                          (if (selected? m)\n                                            \"text-white bg-blue-500\"\n                                            \"text-lg text-gray-400\"))\n                              :on-click #(events/select-tool (:key m))}\n                         (:title m)])\n                (info/tools)))]))\n\n\n(defn status\n  []\n  \n  (let [measure (info/current-measure)\n        final (js/Number ((:calc-final measure) (:baseline @db/state) (:measure-value @db/state)))\n        measure-title (string/lower-case (:title measure))]\n    [:section {:class \"ml-4 mt-2 pr-2 first-letter:flex flex-col min-w-[300px]\"}\n     ;[section2 (str \"Currently\")]\n     [:b (str \"Status\")]\n     [:p \"The baseline risk is \" (safe (:baseline @db/state) 3) \" or \"  (safe (* 100 (:baseline @db/state)) 1) \"%\"]\n     [:p.mt-1 (str \"The \" (string/lower-case (:title (info/measure-by :RR))) \" is \") (:RR @db/state)]\n     [:p.mt-1 (str \"The \" (string/lower-case (:title (info/measure-by :PC))) \" is \") (:PC @db/state) \"%\"]\n     [:p.mt-1 (str \"The \" (string/lower-case (:title (info/measure-by :OR))) \" is \") (:OR @db/state)]\n     [:p.mt-1 (str \"The \" (string/lower-case (:title (info/measure-by :HR))) \" is \") (:HR @db/state)]\n     [:p.mt-1 \"So the final risk is \" (safe (:final @db/state) 3)\n      \" or \" (safe (* 100 (:final @db/state)) 3) \"%.\"]\n\n    ]))\n\n(comment\n  (info/current-measure)\n  (:key (info/current-measure))\n  (:min (info/current-measure))\n  (:max (info/current-measure))\n  )\n\n\n(defn error-report\n  \"Render any errors\"\n  []\n  (when-let [errors (seq (:errors @db/state))]\n    (into [:section] \n          (map (fn [err]\n                 [:div (pr-str err)])\n               errors)))\n  )\n\n(defn inputs-panel\n  \"Summarise the calculation\"\n  []\n  (let [measure (info/current-measure)\n        delta info/delta]\n    [:<>\n     [:section.flex.flex-col.md:flex-eow\n\n      [:form.mt-2.ml-4\n       #_{:no-validate true}\n       [:div [enter {:min delta :max (- 1 delta) :step delta}\n              db/state :baseline \"Baseline risk \"]]\n\n       [:div [enter {:min (:min measure) :max (:max measure) :step (:step measure)}\n              db/state (:key measure) (:title measure)]]\n\n       [:div [enter {:min delta :max (- 1 delta) :step delta}\n              db/state :final \"Final 'exposed' risk\"]]]]]))\n\n\n(defn master-detail\n  []\n  [:section\n   {:class \"flex md:flex-row flex-col overflow-y-auto\"}\n   #_[:div {:class \"w-64\"}\n    [error-report]]\n   [:div.flex.flex-col\n    [:div.flex.flex-col.sm.bg-slate-200\n     [:div.flex.flex-row.sm:flex-row\n      [measures-menu]\n      [inputs-panel]\n      [status]]\n     [:p.ml-4.mb-1.text-gray-600.text-sm \"Red boxes indicate indicate out of range values, as also may 0 and 0.999\"]]\n\n    [maths-detail]]])\n\n\n(defn intro\n  []\n  [:<>\n   [:div.text-center [:b \"RealRisk - Light \"]\n    \"is a crib sheet for those who just need a risk measure calculator and a quick reminder of how things work. \n           If you need more, visit\"\n    [link {:href \"https://realrisk.wintoncentre.uk/\"\n                            :target \"_blank\"} \"the full version.\"]]\n   [:div {:class \"hidden md:block bg-gray-200 p-4 mt-8  rounded-md\"}\n    [para [:span {:class \"text-base text-2xl\"} \"Many studies compare the risks in an 'exposed' group to the risks\n          in a 'baseline' or 'control' group.\"]\n     [para \"\n          The results are often published as some relative measure risk\"] \".\"\n     \" Depending on context, you may encounter Relative Risks, Percentage Changes, Odds Ratios, or Hazard Ratios. \"]\n    [para [:span.text-base \"The maths differs in each case, but the final exposed risk\n            is always determined by applying the relative risk measurement to the baseline risk. \"\n           \"The baseline risk, relative risk, and final risk are related so that knowing two allows you to determine the third.\"\n                            ]]\n    [para [:i \"Here, we provide calculators and definitions for each of these risk measures.\"]]]\n   #_[para [:b.text-blue-400 \"Choose a risk measure to continue:\"]]])\n\n\n(defn flash\n  []\n  [:section {:class \"p-4 text-gray-600 body-font\"}\n   [:div {:class \"flex flex-col md:flex-row justify-start items-start\"}\n    [:div {:class \"lg:flex md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center\"}\n     [:h1 {:class \"title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900\"}\n      \"RealRisk - Light\"]\n     [intro]\n     [:section.my-8.flex.justify-center.space-between\n      [button-secondary-link {:href \"https://realrisk.wintoncentre.uk/\"\n                              :target \"_blank\"} \"Full Version\"]\n      [spacer]\n      [button-primary {:on-click events/go-home} \"Light Version\"]]]\n    [:div {:class \"max-w-[400px]\" #_\"sm:block :max-w-2xl lg:w-full md:w-1/2 w-5/6 \"}\n     [:img {:class \"object-cover object-center rounded-md  w-auto \"\n            :alt \"hero\"\n            :src \"/assets/flash.jpg\"}]\n     [:div \" Photo by \"\n      [:a {:class \"underline text-blue-600 hover:text-blue-800 visited:text-purple-600\"\n           :href \"https://unsplash.com/@johnmoeses\"}\n       \"John Moeses Bauan\"] \" on \"\n      [:a {:class \"underline text-blue-600 hover:text-blue-800 visited:text-purple-600\"\n           :href \"https://unsplash.com/s/photos/risk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"} \"Unsplash\"]]]]\n   ]) \n\n(defn home []\n  (js/setTimeout base/render-math 10)\n  [:div\n   {:class \"container flex flex-col h-screen justify-between pt-2\"}\n   [master-detail]\n   [:section.flex.justify-centre.space-around.m-2\n    [button-primary {:on-click events/go-flash-page} \"Home\"]\n    [spacer]\n    [button-secondary-link {:href \"https://realrisk.wintoncentre.uk/\"\n                            :target \"_blank\"} \"Switch to Real Risk\"]]\n   ])\n\n(defn main\n  []\n  [page\n    (if (db/flash?)\n      [flash]\n      [home])]\n\n)\n\n\n\n(comment\n  @db/state\n  (:final @db/state)\n  (swap! db/state assoc :final 2)\n  )\n"]}